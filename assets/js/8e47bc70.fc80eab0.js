"use strict";(self.webpackChunkdotfile_docs=self.webpackChunkdotfile_docs||[]).push([[8605],{2271:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var l=a(4848),s=a(8453);const i={title:"install.sh",description:"A custom OS-agnostic(ish) install script, to easily get going",tags:["install script","install.sh","install packages","apt","pacman","yum","arch","ubuntu","Fedora/RHEL/CentOS"]},t="Custom install script",r={id:"packages/install.sh/index",title:"install.sh",description:"A custom OS-agnostic(ish) install script, to easily get going",source:"@site/docs/packages/install.sh/index.md",sourceDirName:"packages/install.sh",slug:"/packages/install.sh/",permalink:"/docs/packages/install.sh/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/packages/install.sh/index.md",tags:[{label:"install script",permalink:"/docs/tags/install-script"},{label:"install.sh",permalink:"/docs/tags/install-sh"},{label:"install packages",permalink:"/docs/tags/install-packages"},{label:"apt",permalink:"/docs/tags/apt"},{label:"pacman",permalink:"/docs/tags/pacman"},{label:"yum",permalink:"/docs/tags/yum"},{label:"arch",permalink:"/docs/tags/arch"},{label:"ubuntu",permalink:"/docs/tags/ubuntu"},{label:"Fedora/RHEL/CentOS",permalink:"/docs/tags/fedora-rhel-cent-os"}],version:"current",frontMatter:{title:"install.sh",description:"A custom OS-agnostic(ish) install script, to easily get going",tags:["install script","install.sh","install packages","apt","pacman","yum","arch","ubuntu","Fedora/RHEL/CentOS"]},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/docs/packages/ifinstalled/"},next:{title:"index",permalink:"/docs/packages/install_dotfiles.sh/"}},c={},o=[{value:"OS Agnostic(...ish)",id:"os-agnosticish",level:2},{value:"Fedora",id:"fedora",level:3},{value:"Arch",id:"arch",level:3},{value:"Ubuntu",id:"ubuntu",level:3},{value:"What does it install?",id:"what-does-it-install",level:2},{value:"Flags",id:"flags",level:2},{value:"Usage",id:"usage",level:2},{value:"Code",id:"code",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"custom-install-script",children:"Custom install script"}),"\n",(0,l.jsx)(n.h2,{id:"os-agnosticish",children:"OS Agnostic(...ish)"}),"\n",(0,l.jsx)(n.h3,{id:"fedora",children:"Fedora"}),"\n",(0,l.jsx)(n.h3,{id:"arch",children:"Arch"}),"\n",(0,l.jsx)(n.h3,{id:"ubuntu",children:"Ubuntu"}),"\n",(0,l.jsx)(n.h2,{id:"what-does-it-install",children:"What does it install?"}),"\n",(0,l.jsxs)(n.p,{children:['"It all".',(0,l.jsx)(n.br,{}),"\n","Jokes aside, it will install all the packages, that are mentioned in the ",(0,l.jsx)(n.a,{href:"/docs/packages/all-packages",children:"All the packages!"})," page, just as it will install the dotfiles for the packages that require those."]}),"\n",(0,l.jsx)(n.h2,{id:"flags",children:"Flags"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Install only main packages (nvim, tmux ect)"',children:"--light-install // -li\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Install specific package"',children:"<package-name>\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Install only extras"',children:"--extras // -e \n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Reinstall all packages"',children:"--reinstall // -r\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Update all packages"',children:"--update // -u\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Purge all packages"',children:"--purge // -p\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Purge extras"',children:"--purge // -p\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Purge specific package"',children:"-p <package-name>\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="Show help"',children:"--help // -h\n"})}),"\n",(0,l.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.p,{children:"It doesn't get much easier than this."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./install.sh\n"})}),"\n",(0,l.jsx)(n.p,{children:"and of course append any of the wanted flags, if any like usual"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./install.sh --help\n"})}),"\n",(0,l.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:'title="install.sh"',children:'#/bin/bash\ncd /tmp\nURL=\'\'\nANS=\'\'\nVERSION=\'\'\nerr () {\n  echo "\uf28d Error!" \n  echo "Something went wrong: $1"\n  echo "Press any key to exit installer"\n  read -n 1 BYE\n  exit 1\n}\nprompt_purge () {\n  if [ -f "$HOME/.local/bin/nvim" ] || [ -d "$HOME/.local/share/nvim" ] || [ -d "$HOME/.local/state/nvim" ] || [ -d "$HOME/.local/lib/nvim" ] || [ -d "$HOME/.cache/nvim" ]; then\n    echo "Do you wish to purge files from previous neovim installs? (y/n) "\n    read ANS\n    ANS=${ANS:-\'n\'}\n    if [ "$ANS" = \'n\' ] || [ "$ANS" = \'N\' ]; then\n      echo "\uf061 Skipping purge"\n    else\n     purge \n    fi\n  fi\n}\npurge () {\n  rm -rf "$HOME/.local/bin/nvim" "$HOME/.local/share/nvim" "$HOME/.local/lib/nvim" "$HOME/.local/state/nvim" "$HOME/.cache/nvim" || err "\uf28d Could not purge leftovers"\n  echo "\uf1f8 Leftovers are purged"\n\n}\n\nprompt_for_version () {\n  echo "Neovim Downloader by mikkelrask"\n  echo " - Pick your version below (enter number)"\n  echo " - 1. Latest (stable)"\n  echo " - 2. Nightly (development / prerelease)"\n  echo ""\n  echo "Enter number: "\n  read ANS\n\n  if [ "$ANS" -eq 1 ]; then\n    URL=\'https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz\'\n    VERSION="latest stable"\n  fi\n  if [ "$ANS" -eq \'2\' ]; then\n    URL=\'https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz\'\n    VERSION="nightly"\n  fi\n  echo "\uf019 downloading $VERSION build ..."\n}\nunpack_tar () {\n  # check if tar exists\n  if ! [ -x "$(command -v tar)" ]; then\n    err "\uf28d tar is not installed"\n  fi\n  tar -xf nvim.tar.gz || err "\uf066 unpacking tar archive failed"\n  echo "\uf066 unpacked tar archive" \n}\ncopy_nvim () {\n  cd nvim-linux64\n  cp -r bin share lib $HOME/.local/  || err "\uf0c5 copying files failed"\n  echo "\uf00c nvim installed in .local/bin"\n}\nget_nvim () {\n  wget -O nvim.tar.gz $URL -q --show-progress || err "\uf28d could not download Neovim $VERSION build."\n  echo "\uf00c nvim-linux64.tar.gz downloaded"\n  unpack_tar \n  prompt_purge\n  copy_nvim\n  if [ "$KEEP" ]; then\n    echo "\uf061 Keeping downloaded files"\n  else\n    prompt\n  fi\n  echo "\uf00c Neovim installed successfully!"\n}\nclean_up () {\n  rm -rf /tmp/nvim-linux64 /tmp/nvim.tar.gz\n  echo "\uf00c Cleaned up temporary files"\n}\nprompt_clean () {\n  echo "Do you wish to clean up downloaded files? (y/n) "\n  read ANS\n  ANS=${ANS:-\'y\'}\n  if [ "$ANS" = \'n\' ] || [ "$ANS" = \'N\' ]; then\n    echo "\uf061 Skipping cleanup"\n  else\n    clean_up\n  fi\n}\nif [ -z "$1" ]; then\n  NOARGS=1\nelse\n  if [ "$1" = "-k" ] || [ "$1" = "--keep" ]; then\n    KEEP=1\n  elif [ "$1" = "-p" ] || [ "$1" = "--purge" ]; then\n    echo "\uf1f8 Purging previous neovim installs and leftovers"\n    echo "This action can not be undone. Continue? (y/n) "\n    read ANS\n    ANS=${ANS:-\'n\'}\n    if [ "$ANS" = \'n\' ] || [ "$ANS" = \'N\' ]; then\n      echo "\uf061 Skipping purge"\n      exit 0\n    fi\n    purge\n    exit 0\n  else\n    echo "Usage: install-nvim.sh [OPTION]"\n    echo "This script will download and install neovim in .local/bin"\n    echo "-k or --keep will keep the downloaded files"\n    echo "-p or --purge will remove any previous neovim installs"\n    exit 0\n  fi\nfi\n\nprompt_for_version || err "something went wrong..."\nget_nvim \nprompt_clean\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>r});var l=a(6540);const s={},i=l.createContext(s);function t(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);