"use strict";(self.webpackChunkdotfile_docs=self.webpackChunkdotfile_docs||[]).push([[8624],{9154:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var i=t(4848),l=t(8453);const s={title:"install_nvim.sh",description:"Fetch the latest stable or nightly build from Neovim repos"},a="Custom Neovim installer",o={id:"packages/install_nvim.sh/index",title:"install_nvim.sh",description:"Fetch the latest stable or nightly build from Neovim repos",source:"@site/docs/packages/install_nvim.sh/index.md",sourceDirName:"packages/install_nvim.sh",slug:"/packages/install_nvim.sh/",permalink:"/docs/packages/install_nvim.sh/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/packages/install_nvim.sh/index.md",tags:[],version:"current",frontMatter:{title:"install_nvim.sh",description:"Fetch the latest stable or nightly build from Neovim repos"},sidebar:"tutorialSidebar",previous:{title:"index",permalink:"/docs/packages/install_dotfiles.sh/"},next:{title:"index",permalink:"/docs/packages/install_packages.sh/"}},r={},h=[{value:"Latest vs Nightly",id:"latest-vs-nightly",level:2},{value:"Flags",id:"flags",level:2},{value:"Interactive mode",id:"interactive-mode",level:3},{value:"Pick your own adventure example",id:"pick-your-own-adventure-example",level:4},{value:"Get the Nightly build",id:"get-the-nightly-build",level:3},{value:"Get the latest stable build",id:"get-the-latest-stable-build",level:3},{value:"Install path?",id:"install-path",level:3},{value:"Cleanup",id:"cleanup",level:3},{value:"But what is exactly getting purged? \ud83e\udd14",id:"but-what-is-exactly-getting-purged-",level:5},{value:"Keep",id:"keep",level:3},{value:"Code",id:"code",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"custom-neovim-installer",children:"Custom Neovim installer"}),"\n",(0,i.jsxs)(n.p,{children:["Since the version of neovim that are bundled in most official linux repos are of a certain date, and ",(0,i.jsx)(n.em,{children:"we"})," always want to make sure to have the latest version, I've made this install script that simply fetches the latest build from neovim's repos on Github."]}),"\n",(0,i.jsx)(n.p,{children:"If previous installs or leftovers from previous installs are detected, these will be purged, unless you are using the interactive mode, where you will be prompted on what to do."}),"\n",(0,i.jsx)(n.h2,{id:"latest-vs-nightly",children:"Latest vs Nightly"}),"\n",(0,i.jsxs)(n.p,{children:["The installer can get either the package tagged with ",(0,i.jsx)(n.code,{children:"latest stable"})," or the ",(0,i.jsx)(n.code,{children:"nightly"})," development builds.\nUnless otherwise specified (through ",(0,i.jsx)(n.a,{href:"/docs/packages/install_nvim.sh/#flags",children:"flags"}),") the installer will default to the stable version."]}),"\n",(0,i.jsx)(n.h2,{id:"flags",children:"Flags"}),"\n",(0,i.jsxs)(n.p,{children:["When making these type of utils, I often ",(0,i.jsx)(n.em,{children:"think"})," about those philosofies that unix/linux in general are build up around. Less is more, but with modularity in mind. Always rather make a utility that does one thing, and one thing good, than a huge confusing suite of functions, built into one file."]}),"\n",(0,i.jsxs)(n.p,{children:["While it's not always easy, I try to make the utils I create ",(0,i.jsx)(n.em,{children:"hands free"})," in it's basic form, so to speak. This is the modularity part of the philophy that wins, so I can use one util to call another, wihtout having to gather user input for example\nBut that also means you have to make decissions on behalf of any potential users who will end up using it. And I hate ",(0,i.jsx)(n.em,{children:"that"})," part, and love freedom and customization options!",(0,i.jsx)(n.br,{}),"\n","So while the utils are made to be automatic, the user can instead make their own by passing the correct flags, for their custom neovim install, for example."]}),"\n",(0,i.jsx)(n.h3,{id:"interactive-mode",children:"Interactive mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Interactive install"',children:"./install_nvim.sh --interactive\n# or it's shorthand\n./install_nvim.sh -i\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will prompt you for all the choices the installer offers. If leftovers from previous installs are found, you will be prompted ",(0,i.jsx)(n.em,{children:"if"}),' you wish to purge these, where the installer otherwise is made to be "hands free", and assume some sane defaults. ',(0,i.jsx)(n.em,{children:"(if stuff is found purge it, install the new stable stuff and the dots)"})]}),"\n",(0,i.jsx)(n.h4,{id:"pick-your-own-adventure-example",children:"Pick your own adventure example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="./install_nvim.sh -i"',children:"Neovim Downloader \n- Pick your version below (enter number)\n- 1. Latest (stable)\n- 2. Nightly (development / prerelease)\n\nEnter number: 2\n\n\uf019 downloading nightly build ...\nnvim-linux64.tar.gz [##############################################] 100% @ 21.1mb/s\n\uf00c nvim-linux64.tar.gz downloaded\n\uf066 unpacked tar archive\n\ud83d\udc7c no previous installs/configs found - nothing to purge \n\nDo you want to specify the install path? \nDefault is /home/mr/.local/bin\n- leave empty/Use Enter to pick default path or\n- Type the full path you otherwise wish to use followed by Enter\n\n/usr/bin/\n\n\uf06a Copying files to /usr/bin requires elevated rights. \ndoas (mr@dolores) password:\n\n\uf00c Neovim installed successfully!\nDo you want to use stow to place nvim dotfiles in your ~/.config directory? (y/n)\ny\n\n\uf00c Neovim configs installed successfully!\n\nDo you want to delete the downloaded tar-file and its untarred directory?  (y/n)\nn\n\n\uf061 Skip cleaning - gotcha! Love to see it\n\uf00c fin - fade to black\n"})}),"\n",(0,i.jsx)(n.h3,{id:"get-the-nightly-build",children:"Get the Nightly build"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Install the development branch version"',children:"./install_nvim.sh --nightly\n# or it's shorthand\n./install_nvim.sh -n\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is the only thing the flag does - the rest will still be assumed!"}),"\n",(0,i.jsx)(n.h3,{id:"get-the-latest-stable-build",children:"Get the latest stable build"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Install the build tagged with Latest"',children:"./install_nvim.sh --latest\n# or it's shorthand\n./install_nvim.sh -l\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is the only thing the flag does - the rest will still be assumed!"}),"\n",(0,i.jsx)(n.h3,{id:"install-path",children:"Install path?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Where to install nvim"',children:"./install_nvim.sh --dir /YOUR/DESIRED/PATH/\n# or it's shorthand\n./install_nvim.sh -d /YOUR/DESIRED/PATH/\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Only the ",(0,i.jsx)(n.code,{children:"nvim"})," file itself will be placed in the selected path, where the ",(0,i.jsx)(n.code,{children:"shared"})," and ",(0,i.jsx)(n.code,{children:"state"})," directories are still going to be located in ",(0,i.jsx)(n.code,{children:"$HOME/.local"})," and the dotfiles located in according to your ",(0,i.jsx)(n.a,{href:"/docs/environment-variables/dotfiles-homedir",children:"$DOTFILES_HOMEDIR"}),", if set. This is assumed as $HOME/dotfiles otherwise."]}),"\n",(0,i.jsx)(n.h3,{id:"cleanup",children:"Cleanup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Purge neovim and related folders"',children:"./install_nvim.sh --purge\n# or it's shorthand\n./install_nvim.sh -p\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you for whatever reason wan't to delete neovim in its entirety, and what has been installed either by the installer itself or by you, adding the ",(0,i.jsx)(n.code,{children:"-p"}),"-flag will do this for you. Combined with the ",(0,i.jsx)(n.code,{children:"-i"})," flag, you will be prompted to confirm each directory/file that is set to be deleted."]}),"\n",(0,i.jsx)(n.h5,{id:"but-what-is-exactly-getting-purged-",children:"But what is exactly getting purged? \ud83e\udd14"}),"\n",(0,i.jsx)(n.p,{children:"Glad you asked!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$HOME/\n    - .cache/nvim\n    - .local/bin/nvim\n    - .local/state/nvim/\n    - .local/share/nvim/\n    - .config/nvim/\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Just as it will unistall neovim, if its found to be installed by your systems package manager/found in ",(0,i.jsx)(n.code,{children:"/bin/"}),", ",(0,i.jsx)(n.code,{children:"/usr/bin/"})," or ",(0,i.jsx)(n.code,{children:"/usr/local/bin/"}),". It will use the default package manager for this action!"]}),"\n",(0,i.jsx)(n.h3,{id:"keep",children:"Keep"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Keep downloaded files"',children:"./install_nvim.sh --keep\n# or it's shorthand\n./install_nvim.sh -k\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="See help message"',children:"./install_nvim.sh --help\n# or it's shorthand\n./install_nvim.sh -h\n"})}),"\n",(0,i.jsx)(n.p,{children:"And of course all flags can be used individually or combined, though most of the combinations would be somewhat contradicting, but will work if you insist."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Combining passed flags"',children:'# Install the Nightly development build and keep the downloaded files\n./install_nvim.sh -nk \n# "Stacked" arguments will be executed one at a time\n./install_nvim.sh -p -n -l -d /bin/ \n'})}),"\n",(0,i.jsxs)(n.p,{children:["The last example would result in ",(0,i.jsx)(n.code,{children:"-p"})," purging everything that currently exists, and then the ",(0,i.jsx)(n.code,{children:"-n"})," gets you the latest nightly build as usual, ",(0,i.jsx)(n.em,{children:"and then"})," the ",(0,i.jsx)(n.code,{children:"-l"})," will fetch the latest stable nvim and place that in the directory that where specified with the ",(0,i.jsx)(n.code,{children:"-d"})," option.",(0,i.jsx)(n.br,{}),"\n",'Basically the function that is exectued by any flag (i.e purge) will before executing look at argument next in line, and if that flag can\'t be "combined" with itself, the current flag will just execute, and move along to the next flag, that will do the same check, until we are at the end.']}),"\n",(0,i.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="Install the latest Neovim"',children:'#/bin/bash\ncd /tmp\nURL=\'\'\nANS=\'\'\nVERSION=\'\'\nerr () {\n  echo "\uf28d Error!" \n  echo "Something went wrong: $1"\n  echo "Press any key to exit installer"\n  read -n 1 BYE\n  exit 1\n}\nprompt_purge () {\n  if [ -f "$HOME/.local/bin/nvim" ] || [ -d "$HOME/.local/share/nvim" ] || [ -d "$HOME/.local/state/nvim" ] || [ -d "$HOME/.local/lib/nvim" ] || [ -d "$HOME/.cache/nvim" ]; then\n    echo "Do you wish to purge files from previous neovim installs? (y/n) "\n    read ANS\n    ANS=${ANS:-\'n\'}\n    if [ "$ANS" = \'n\' ] || [ "$ANS" = \'N\' ]; then\n      echo "\uf061 Skipping purge"\n    else\n     purge \n    fi\n  fi\n}\npurge () {\n  rm -rf "$HOME/.local/bin/nvim" "$HOME/.local/share/nvim" "$HOME/.local/lib/nvim" "$HOME/.local/state/nvim" "$HOME/.cache/nvim" || err "\uf28d Could not purge leftovers"\n  echo "\uf1f8 Leftovers are purged"\n\n}\n\nprompt_for_version () {\n  echo "Neovim Downloader by mikkelrask"\n  echo " - Pick your version below (enter number)"\n  echo " - 1. Latest (stable)"\n  echo " - 2. Nightly (development / prerelease)"\n  echo ""\n  echo "Enter number: "\n  read ANS\n\n  if [ "$ANS" -eq 1 ]; then\n    URL=\'https://github.com/neovim/neovim/releases/latest/download/nvim-lDoneinux64.tar.gz\'\n    VERSION="latest stable"\n  fi\n  if [ "$ANS" -eq \'2\' ]; then\n    URL=\'https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz\'\n    VERSION="nightly"\n  fi\n  echo "\uf019 downloading $VERSION build ..."\n}\nunpack_tar () {\n  # check if tar exists\n  if ! [ -x "$(command -v tar)" ]; then\n    err "\uf28d tar is not installed"\n  fi\n  tar -xf nvim.tar.gz || err "\uf066 unpacking tar archive failed"\n  echo "\uf066 unpacked tar archive" \n}\ncopy_nvim () {\n  cd nvim-linux64\n  cp -r bin share lib $HOME/.local/  || err "\uf0c5 copying files failed"\n  echo "\uf00c nvim installed in .local/bin"\n}\nget_nvim () {\n  wget -O nvim.tar.gz $URL -q --show-progress || err "\uf28d could not download Neovim $VERSION build."\n  echo "\uf00c nvim-linux64.tar.gz downloaded"\n  unpack_tar \n  prompt_purge\n  copy_nvim\n  if [ "$KEEP" ]; then\n    echo "\uf061 Keeping downloaded files"\n  else\n    prompt_clean\n  fi\n  echo "\uf00c Neovim installed successfully!"\n}\nclean_up () {\n  rm -rf /tmp/nvim-linux64 /tmp/nvim.tar.gz\n  echo "\uf00c Cleaned up temporary files"\n}\nprompt_clean () {\n  echo "Do you wish to clean up downloaded files? (y/n) "\n  read ANS\n  ANS=${ANS:-\'y\'}\n  if [ "$ANS" = \'n\' ] || [ "$ANS" = \'N\' ]; then\n    echo "\uf061 Skipping cleanup"\n  else\n    clean_up\n  fi\n}\nif [ -z "$1" ]; then\n  NOARGS=1\nelse\n  if [ "$1" = "-k" ] || [ "$1" = "--keep" ]; then\n    KEEP=1\n  elif [ "$1" = "-p" ] || [ "$1" = "--purge" ]; then\n    echo "\uf1f8 Purging previous neovim installs and leftovers"\n    echo "This action can not be undone. Continue? (y/n) "\n    read ANS\n    ANS=${ANS:-\'n\'}\n    if [ "$ANS" = \'n\' ] || [ "$ANS" = \'N\' ]; then\n      echo "\uf061 Skipping purge"\n      exit 0\n    fi\n    purge\n    exit 0\n  else\n    echo "Usage: install-nvim.sh [OPTION]"\n    echo "This script will download and install neovim in .local/bin"\n    echo "-k or --keep will keep the downloaded files"\n    echo "-p or --purge will remove any previous neovim installs"\n    exit 0\n  fi\nfi\n\nprompt_for_version || err "something went wrong..."\nget_nvim \nprompt_clean\n'})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const l={},s=i.createContext(l);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);